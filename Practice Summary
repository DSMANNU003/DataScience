:::::::::::::::::::::::::::::::::::::::::::::::::::::
n = 18

if n % 2 != 0:
    print("Weird")  # This runs if n is odd
elif 2 <= n <= 5:
    print("Not Weird")  # This runs if n is even and between 2 and 5
elif 6 <= n <= 20:
    print("Weird")  # This runs if n is even and between 6 and 20
else:
    print("Not Weird")  # This runs if n is even and greater than 20

Above Code explaination::::::::::::::
% is the modulo operator, which gives the remainder of a division.
!= is the not equal operator, used to compare two values to see if they are different.
In your code, n % 2 != 0 checks if n is odd.

if: Starts a condition check. If the condition is True, it executes the code block following it.
elif: Provides additional conditions to check if the if condition is False. You can have multiple elif blocks.
else: Executes a block of code if none of the previous if or elif conditions were True
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if __name__ == '__main__':
    a = int(input())
    b = int(input())

1. if __name__ == '__main__':
__name__ is a special built-in variable in Python. It is automatically set to the string '__main__' when the Python script is executed directly (i.e., when you run the script from the command line or an IDE).
If the script is being imported into another script (as a module), __name__ is set to the name of the script/module (not '__main__').
The condition if __name__ == '__main__': checks whether the script is being executed directly (as opposed to being imported). If it is running directly, the code inside the if block will execute. If the script is being imported, this block of code will not run.

2. a = int(input()) and b = int(input())
input() is a Python function that reads a line of input from the user. By default, it returns the input as a string.
int() is used to convert the string input into an integer.
So:

a = int(input()) prompts the user for input and converts the input into an integer, assigning it to the variable a.
b = int(input()) does the same for the variable b.


Why Use if __name__ == '__main__':?
This construct is useful when you want to write code that can be reused both as a standalone script or as part of a module.
Code inside the if __name__ == '__main__': block will only execute when the script is run directly, but won't execute if the script is imported as a module into another script.
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

The expression a // b in Python represents integer division (also known as floor division). It divides a by b and returns the quotient without the remainder, essentially rounding down the result to the nearest integer.
The // operator performs integer division, meaning it discards the fractional part and only returns the whole number part of the division result.
For example:

5 // 2 results in 2 because 5 / 2 = 2.5, and the // operator removes the decimal part, leaving 2.
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

. Primitive Data Types (Basic Types)
These are the most basic types of data and are provided by almost all programming languages. Examples include:

Integer (int): Whole numbers (positive, negative, or zero) without decimals. Example: 5, -3, 0
Floating-point (float): Numbers that have a decimal point. Example: 3.14, -0.001, 2.0
Character (char): A single character or symbol. Example: 'a', 'A', '%'
String (str): A sequence of characters. Example: "hello", "123"
Boolean (bool): A type that represents truth values: True or False.
Null (None in Python, null in JavaScript, nil in Ruby, etc.): Represents the absence of a value.

2. Composite (Non-Primitive) Data Types
These are more complex types, constructed from primitive types or other composite types.

Array: A collection of elements of the same type stored in contiguous memory locations. Example: [1, 2, 3] (in languages like Python, C, Java)
List: An ordered collection of items that can be of different types (in languages like Python, JavaScript, etc.). Example: [1, "hello", True]
Tuple: Similar to a list, but immutable (unchangeable). Example: (1, 2, 3)
Set: A collection of unique items. Example: {1, 2, 3}
Dictionary (or HashMap): A collection of key-value pairs. Example: {"name": "John", "age": 30}
3. Abstract Data Types (ADT)
These are data types that are defined by a set of operations rather than a specific implementation.

Stack: A collection that follows the Last In, First Out (LIFO) principle. Operations are push, pop, and peek.
Queue: A collection that follows the First In, First Out (FIFO) principle. Operations are enqueue, dequeue.
Linked List: A linear collection of elements, where each element points to the next one.
Tree: A hierarchical collection of nodes, often used to represent relationships like family trees or file systems.
Graph: A set of nodes connected by edges, useful in representing networks or connections.

4. User-Defined Data Types
These are data types created by the programmer using primitive or other composite types.

Classes: A blueprint for creating objects (instances). A class defines properties and behaviors (methods) of objects. Example (in Python):
python

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
Structures (in C/C++): A way to group different data types together. Example:

struct Person {
    char name[50];
    int age;
};
5. Enumerated Types (Enums)
These are a special kind of data type that represents a set of named values. For example, days of the week, or states of an application.

Example (in C):

enum Day { Monday, Tuesday, Wednesday, Thursday, Friday };
6. Specialized Data Types
Pointer (in languages like C/C++): A variable that holds the memory address of another variable.
File: Represents files, allowing reading and writing data to a file. Common in languages like Python, C, Java.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

An extra day is added to the calendar almost every four years as February 29, and the day is called a leap day. It corrects the calendar for the fact that our planet takes approximately 365.25 days to orbit the sun. A leap year contains a leap day.

In the Gregorian calendar, three conditions are used to identify leap years:

The year can be evenly divided by 4, is a leap year, unless:
The year can be evenly divided by 100, it is NOT a leap year, unless:
The year is also evenly divisible by 400. Then it is a leap year.
This means that in the Gregorian calendar, the years 2000 and 2400 are leap years, while 1800, 1900, 2100, 2200, 2300 and 2500 are NOT leap years. Source

Task

Given a year, determine whether it is a leap year. If it is a leap year, return the Boolean True, otherwise return False.

Note that the code stub provided reads from STDIN and passes arguments to the is_leap function. It is only necessary to complete the is_leap function.

Input Format

Read , the year to test.

Constraints


Output Format

The function must return a Boolean value (True/False). Output is handled by the provided code stub.

Sample Input 0

1990
Sample Output 0

False

Explanation 0

1990 is not a multiple of 4 hence it's not a leap year.

def is_leap(year):
    # If divisible by 400, it's a leap year
    if year % 400 == 0:
        return True
    # If divisible by 100 but not 400, it's not a leap year
    elif year % 100 == 0:
        return False
    # If divisible by 4 but not 100, it's a leap year
    elif year % 4 == 0:
        return True
    # Otherwise, it's not a leap year
    else:
        return False
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

The most straightforward approach is to use a loop to print the integers directly without spaces. We can use the end parameter of the print() function to avoid adding a newline or space after each integer.

Hereâ€™s the code:

n = int(input())  # Read the integer input

for i in range(1, n + 1):  # Loop from 1 to n (inclusive)
    print(i, end='')  # Print each number without adding a space or newline
Explanation:
input() reads the input, which is converted to an integer using int().
range(1, n + 1) generates numbers from 1 to n.
print(i, end='') prints each number in the sequence without a newline (end='' ensures no space or newline is added after each number).
Example Walkthrough:
Sample Input:
3
Output:
123
We start from 1 and go up to 3. The numbers 1, 2, and 3 are printed consecutively without spaces between them, resulting in the string 123.
Notes:
The use of end='' in the print() function is critical here. It tells Python not to append the default newline or space after each printed value, which would be the usual behavior of print().

